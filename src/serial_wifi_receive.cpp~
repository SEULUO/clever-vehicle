#include <ros/ros.h> 
#include <serial/serial.h>  //ROS已经内置了的串口包 
#include <std_msgs/String.h> 
#include "smart_car/gpsdata.h"  //包名，msg文件名
#include "data_deal.h"    //数据处理头文件
serial::Serial ser; //声明串口对象
#define datanum 4
#define bufflen 34

//定义全局变量
double recvdata[datanum];
u8 recvbuff[bufflen];

int main (int argc, char** argv) 
{ 	
	//初始化节点,节点名-serial_wifi_send
	ros::init(argc, argv, "serial_wifi_recvive"); 
	//声明节点句柄 
	ros::NodeHandle n; 
	//订阅GPS主题，并配置回调函数 
	//ros::Subscriber sub = n.subscribe("FGPS_data", 1000, sendCallback); 
	
	//发布主题 
	ros::Publisher pub = n.advertise<smart_car::gpsdata>("FGPS_data", 1000); 
	
	try 
	{ 
		//设置串口属性，并打开串口 
		ser.setPort("/dev/ttyUSB1"); 
		ser.setBaudrate(115200); 
		serial::Timeout to = serial::Timeout::simpleTimeout(1000); 
		ser.setTimeout(to); 
		ser.open(); 
	 }
	catch (serial::IOException& e) 
	{ 
		ROS_ERROR_STREAM("Unable to open port "); 
		return -1; 
	} 

	//检测串口是否已经打开，并给出提示信息 
	if(ser.isOpen()) 
	{ 
		ROS_INFO_STREAM("Serial Port initialized"); 
	} 
	else 
	{ 
		return -1; 
	}
	//指定循环的频率 
	ros::Rate loop_rate(10);
	while(ros::ok()) 
	{ 
		if(ser.available())
		{ 
			ROS_INFO_STREAM("Reading from serial port");  
			ser.read(recvbuff,bufflen);   //从串口读数据
			recvdouble(recvbuff,recvdata,datanum);
			ROS_INFO("recv_lat:%.8lf",recvdata[0]);
			ROS_INFO("recv_lon:%.8lf",recvdata[1]);
			ROS_INFO("recv_yaw:%.2lf",recvdata[2]);
			ROS_INFO("recv_speed:%.2lf",recvdata[3]);
			 
			//将数据整理成自定义消息包
			smart_car::gpsdata fdata;
			fdata.lat = recvdata[0]; 
			fdata.lon = recvdata[1];
			fdata.yaw = recvdata[2];
			fdata.speed = recvdata[3];
			pub.publish(fdata);   //发布消息
		} 
		//处理ROS的信息，比如订阅消息,并调用回调函数 
		ros::spinOnce(); 
		loop_rate.sleep(); 
	} 
	 
	return 0;
} 
