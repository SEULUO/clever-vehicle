#include <ros/ros.h> 
#include <serial/serial.h>  //ROS已经内置了的串口包 
#include <std_msgs/String.h> 
#include "smart_car/gpsdata.h"  //包名，msg文件名
#include "data_deal.h"    //数据处理头文件
serial::Serial ser; //声明串口对象
#define datanum 4
#define bufflen 34

//定义全局变量
double senddata[datanum];
u8 sendbuff[bufflen];

void sendCallback(const smart_car::gpsdata::ConstPtr& gpssend)
{
	//数组里按顺序分别为lat,lon,yaw,speed
	senddata[0] = gpssend->lat;
	senddata[1] = gpssend->lon;
	senddata[2] = gpssend->yaw;
	senddata[3] = gpssend->speed;
	ROS_INFO("send_lat:%.8lf",senddata[0]);
	ROS_INFO("send_lon:%.8lf",senddata[1]);
	ROS_INFO("send_yaw:%.2lf",senddata[2]);
	ROS_INFO("send_speed:%.2lf",senddata[3]);
	sendmessage(sendbuff,senddata,datanum);
	ser.write(sendbuff,bufflen);   //发送串口数据
}

int main (int argc, char** argv) 
{ 	
	//初始化节点,节点名-serial_wifi_send
	ros::init(argc, argv, "serial_wifi_send"); 
	//声明节点句柄 
	ros::NodeHandle n; 
	//订阅GPS主题，并配置回调函数 
	ros::Subscriber sub = n.subscribe("GPS_senddata", 1000, sendCallback); 
	
	//发布主题 
	//ros::Publisher read_pub = n.advertise<serial_node::serial_receive>("receive", 1000); 
	
	try 
	{ 
		//设置串口属性，并打开串口 
		ser.setPort("/dev/ttyUSB0"); 
		ser.setBaudrate(115200); 
		serial::Timeout to = serial::Timeout::simpleTimeout(1000); 
		ser.setTimeout(to); 
		ser.open(); 
	 }
	catch (serial::IOException& e) 
	{ 
		ROS_ERROR_STREAM("Unable to open port "); 
		return -1; 
	} 
	
	//检测串口是否已经打开，并给出提示信息 
	if(ser.isOpen()) 
	{ 
		ROS_INFO_STREAM("Serial Port initialized"); 
	} 
	else 
	{ 
		return -1; 
	}
	ros::spin(); 
	 
	return 0;
} 
